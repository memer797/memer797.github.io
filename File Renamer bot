import os
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# Replace 'YOUR_BOT_TOKEN' with the actual token of your Telegram bot
TOKEN = '6600757300:AAEs6FhAKb4btafhmyizDcfV4VqHpphq_fc'

# Define the command handlers
def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('Hi! I am a File Renamer Bot. Send me a file to rename.')

def rename_file(update: Update, context: CallbackContext) -> None:
    # Check if the message has a document
    if update.message.document:
        file_id = update.message.document.file_id
        file = context.bot.get_file(file_id)
        file_name = file.file_path.split("/")[-1]

        # Rename the file (you can customize the renaming logic here)
        new_file_name = "new_" + file_name

        # Download the file
        file.download(new_file_name)

        update.message.reply_text(f"File renamed to: {new_file_name}")
    else:
        update.message.reply_text("Please send a file (document) for renaming.")

def help_command(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('Send me a file, and I will rename it for you.')

def main() -> None:
    updater = Updater(TOKEN)

    # Get the dispatcher to register handlers
    dp = updater.dispatcher

    # Register command handlers
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))

    # Register a message handler for file renaming
    dp.add_handler(MessageHandler(Filters.document, rename_file))

    # Start the Bot
    updater.start_polling()

    # Run the bot until you send a signal to stop it
    updater.idle()

if __name__ == '__main__':
    main()
